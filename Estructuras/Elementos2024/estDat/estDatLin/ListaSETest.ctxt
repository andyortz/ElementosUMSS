#BlueJ class context
comment0.target=ListaSETest
comment0.text=\r\n\ The\ test\ class\ ListaSETest.\r\n\r\n\ @author\ \ (your\ name)\r\n\ @version\ (a\ version\ number\ or\ a\ date)\r\n
comment1.params=
comment1.target=ListaSETest()
comment1.text=\r\n\ Default\ constructor\ for\ test\ class\ ListaSETest\r\n
comment10.params=
comment10.target=void\ testBuscar()
comment10.text=\r\n\ busca\ el\ dato\ en\ la\ lista\r\n\ @param\ dato\ que\ el\ dato\ a\ buscar\r\n\ @return\ un\ valor\ boolean\ que\ indica\ si\ el\ dato\ esta\ o\ no\r\n
comment11.params=
comment11.target=void\ testIndiceDe()
comment11.text=\r\n\ encuentra\ la\ posicion\ del\ dato\ si\ el\ dato\ pertence\ a\ la\ lista,\r\n\ caso\ contrario\ devuelve\ -1\r\n\ @param\ dato\ a\ buscar\r\n\ @return\ indice\ del\ dato\ o\ -1\r\n
comment12.params=
comment12.target=void\ testLongitud()
comment12.text=\r\n\ calcula\ la\ cantida\ de\ datos\ que\ \ tiene\ la\ lista\r\n\ @param\ nada\r\n\ @return\ la\ longitud\ de\ \ la\ lista\r\n
comment13.params=
comment13.target=void\ testSet()
comment13.text=\r\n\ modifica\ el\ dato\ de\ la\ posicion\ pos\ con\ el\ dato\ enviado\r\n\ @param\ pos\ que\ indica\ la\ posicion\ a\ modificar\r\n\ @param\ dato\ el\ nuevo\ dato\r\n\ @return\ modifica\ el\ dato\ de\ la\ posicion\ pos,\ si\ es\ posible\r\n
comment14.params=
comment14.target=void\ testIntercambiar()
comment14.text=\r\n\ intercambia\ datos\ de\ las\ posiciones\ si\ existieran\r\n\ @param\ pos1,\ pos2\r\n\ @return\ boolean\ informe\ del\ intercambio\r\n
comment15.params=
comment15.target=void\ testCompararDatos()
comment15.text=\r\n\ compara\ datos\ de\ las\ posiciones\ si\ existieran\r\n\ @param\ pos1,\ pos2\r\n\ @return\ boolean\ informe\ de\ la\ compararcion\r\n
comment16.params=
comment16.target=void\ testClonar()
comment16.text=\r\n\ permite\ generar\ una\ lista\ copia\ de\ la\ original\r\n\ @param\ nada\r\n\ @return\ una\ lista\ copia\r\n
comment17.params=
comment17.target=void\ testVaciar()
comment17.text=\r\n\ permite\ eliminar\ todos\ los\ datos\ de\ la\ lista\r\n\ @param\ nada\r\n\ @return\ nada\ lista\ vacia\r\n
comment18.params=
comment18.target=void\ testToString()
comment18.text=\r\n\ muestra\ los\ datos\ de\ la\ lista\ como\ una\ cadena\r\n\ @param\ nada\r\n\ @return\ la\ cadena\ que\ serializa\ la\ lista\r\n
comment19.params=
comment19.target=void\ testInvertir()
comment19.text=\r\n\ invierte\ los\ datos\ de\ la\ lista\r\n\ @param\ nada\r\n\ @return\ lista\ invertida\r\n
comment2.params=
comment2.target=void\ setUp()
comment2.text=\r\n\ Sets\ up\ the\ test\ fixture.\r\n\r\n\ Called\ before\ every\ test\ case\ method.\r\n
comment20.params=
comment20.target=void\ testEquals()
comment20.text=\r\n\ permite\ decidir\ si\ la\ lista\ es\ igual\ a\ la\ otraLista\r\n\ @param\ otraLista\ lista\ con\ la\ que\ se\ va\ a\ comparar,\ debe\ tener\ datos\ del\ mismo\ tipo\ que\ la\ lista\ \r\n\ @return\ si\ son\ iguales\ \ o\ no\r\n
comment21.params=
comment21.target=void\ testInsertar3()
comment21.text=\r\n\ permite\ insertar\ todos\ los\ datos\ la\ otraLista\ al\ final\ de\ la\ lista\r\n\ @param\ otraLista\ lista\ de\ datos\ del\ mismo\ tipo\ que\ la\ lista\r\n\ @return\ nada\ los\ datos\ se\ insertan\ al\ final\r\n
comment3.params=
comment3.target=void\ tearDown()
comment3.text=\r\n\ Tears\ down\ the\ test\ fixture.\r\n\r\n\ Called\ after\ every\ test\ case\ method.\r\n
comment4.params=
comment4.target=void\ testVacia()
comment4.text=\r\n\ indica\ si\ la\ lista\ esta\ vacia\r\n\ @param\ ninguni\r\n\ @return\ un\ resultado\ logico\ true/false\r\n
comment5.params=
comment5.target=void\ testInsertar1()
comment5.text=\r\n\ permite\ insertar\ un\ dato\ al\ final\ de\ la\ lista\r\n\ @param\ dato\ que\ es\ el\ dato\ a\ insertar\r\n\ @return\ inserta\ el\ dato\ al\ final\ de\ la\ lista\r\n
comment6.params=
comment6.target=void\ testEliminar()
comment6.text=\r\n\ elimina\ el\ dato\ que\ esta\ en\ la\ posicion\ pos\ y\ delvuelve\ el\ dato\ eliminado\r\n\ si\ no\ existe\ la\ posicion\ pos\ retorna\ null\r\n\ @param\ pos\ que\ es\ la\ posicion\ del\ dato\ a\ eliminar,\ debe\ ser\ entero\ positivo\ incluido\ el\ 0\r\n\ @return\ el\ dato\ eliminado\ o\ null\r\n
comment7.params=
comment7.target=void\ testEliminar1()
comment7.text=\r\n\ elimina\ el\ dato\ delvuelve\ el\ dato\ eliminado\r\n\ si\ no\ existe\ el\ dato\ retorna\ null\r\n\ @param\ dato\ a\ eliminar\r\n\ @return\ el\ dato\ eliminado\ o\ null\r\n
comment8.params=
comment8.target=void\ testAcceder1()
comment8.text=\r\n\ permite\ acceder\ al\ dato\ de\ la\ posicion\ pos,\ si\ la\ posicio\ pos\ no\ existe\ retorna\ null\r\n\ @param\ pos\ es\ la\ posicion\ del\ dato\ a\ acceder,\ es\ un\ entero\ positivo\ incluido\ el\ 0\r\n\ @return\ el\ dato\ de\ la\ posicion\ requerida\ o\ null\r\n
comment9.params=
comment9.target=void\ testInsertar2()
comment9.text=\r\n\ insertar\ una\ dato\ en\ la\ posicion\ pos,\ si\ la\ posicion\ no\ existe\ y\ no\ es\ posible\ crearla,\r\n\ no\ inserta\ el\ dato\r\n\ @param\ dato\ que\ es\ el\ dato\ a\ insertar\r\n\ @param\ pos\ que\ es\ la\ posicion\ en\ la\ que\ se\ va\ a\ insertar,\ es\ un\ entero\ positivo\ incluido\ el\ 0\r\n\ @return\ inserta\ el\ dato\ si\ es\ posible\r\n
numComments=22

#BlueJ class context
comment0.target=ListaDE
comment1.params=
comment1.target=ListaDE()
comment10.params=q\ dato
comment10.target=NodoDE\ buscar(NodoDE,\ java.lang.Object)
comment11.params=dato
comment11.target=void\ eliminarTodas(java.lang.Object)
comment11.text=\r\n\ elimina\ las\ ocurrencias\ del\ dato\ en\ caso\ de\ existir\ y\ ademas\ te\ devuelve\ el\ dato\ eliminado\r\n\ @param\ dato\ a\ buscar\ de\ clase\ T\ \r\n\ @return\ nada\r\n
comment12.params=pos
comment12.target=java.lang.Object\ eliminar(int)
comment12.text=\r\n\ elimina\ el\ dato\ en\ la\ posicion\ pos,\ en\ caso\ de\ existir\ y\ ademas\ te\ devuelve\ el\ dato\ eliminado\r\n\ @param\ pos\ es\ un\ entero\ positivo\ inlucido\ el\ 0\r\n\ @return\ el\ dato\ eliminado\ si\ existiera\r\n
comment13.params=
comment13.target=java.lang.Object\ eliminarUlt()
comment14.params=ini
comment14.target=NodoDE\ ultimo(NodoDE)
comment15.params=q\ pos
comment15.target=NodoDE\ buscar(NodoDE,\ int)
comment16.params=q\ pos
comment16.target=NodoDE\ buscar1(NodoDE,\ int)
comment17.params=
comment17.target=void\ vaciar()
comment17.text=\r\n\ elimina\ todos\ los\ elementos\ de\ la\ lista\r\n
comment18.params=pos
comment18.target=java.lang.Object\ acceder(int)
comment18.text=\r\n\ Te\ devuelve\ el\ dato\ en\ la\ posicion\ posicion\ pos,\ en\ caso\ de\ existir\r\n\ @param\ pos\ es\ un\ entero\ positivo\ incluido\ el\ 0\r\n\ @return\ el\ dato\ al\ que\ se\ desea\ acceder\ si\ existiera\r\n
comment19.params=dato
comment19.target=java.lang.Object\ acceder(java.lang.Object)
comment19.text=\r\n\ Devuelve\ el\ dato\ que\ cumple\ la\ igual\ del\ dato\ de\ parametro,\ en\ caso\ de\ existir.\r\n\ @param\ dato\ a\ acceder\ de\ clase\ T\r\n\ @return\ el\ dato\ al\ que\ se\ desea\ acceder\ si\ existiera\r\n
comment2.params=ini
comment2.target=ListaDE(NodoDE)
comment20.params=desde\ hasta
comment20.target=ListaDE\ acceder(int,\ int)
comment20.text=\r\n\ @param\ enteros\ positivos\ incluido\ el\ 0\r\n\ @return\ la\ Lista\ desde\ una\ posicion\ hasta\ otra\r\n
comment21.params=desde\ hasta\ res\ act
comment21.target=void\ rellenar(int,\ int,\ ListaDE,\ NodoDE)
comment22.params=dato
comment22.target=boolean\ buscar(java.lang.Object)
comment22.text=\r\n\ busca\ el\ dato,\ en\ caso\ de\ existir\ devuelve\ true\r\n\ @param\ dato\ a\ buscar\ de\ clase\ T\r\n
comment23.params=dato
comment23.target=int\ indiceDe(java.lang.Object)
comment23.text=\r\n\ busca\ el\ dato\r\n\ @param\ dato\ a\ buscar\ de\ clase\ T\r\n\ @return\ posicion\ del\ dato\ en\ caso\ de\ existir,\ -1\ en\ caso\ de\ no\ existir\r\n
comment24.params=q\ dato
comment24.target=int\ buscarPosicion(NodoDE,\ java.lang.Object)
comment25.params=
comment25.target=int\ longitud()
comment25.text=\r\n\ permite\ saber\ la\ longitud\ de\ la\ Lista\r\n
comment26.params=i\ j
comment26.target=boolean\ intercambiar(int,\ int)
comment26.text=\r\n\ busca\ el\ dato\ en\ la\ posicion\ i\ por\ el\ dato\ en\ la\ posicion\ j\r\n\ @param\ enteros\ positivos\ inluidos\ el\ 0\r\n\ @return\ true\ si\ ambos\ datos\ existen,\ false\ si\ al\ menos\ uno\ de\ los\ datos\ no\ existe\r\n
comment27.params=dato\ pos
comment27.target=void\ reemplazar(java.lang.Object,\ int)
comment27.text=\r\n\ reemplaza\ el\ dato\ de\ la\ posicion\ pos\r\n\ @param\ dato\ de\ clase\ T,\ que\ reemplazara\ al\ dato\ de\ la\ posicion\ pos,\ en\ caso\ de\ no\ existir\ lo\ a\u00F1ade\ al\ final\ de\ la\ lista,\r\n\ \ \ \ \ \ \ \ pos\ entero\ positivo\ incluido\ el\ 0\r\n\ @return\ nada\r\n
comment28.params=dato\ pos\ act
comment28.target=void\ reemplazar(java.lang.Object,\ int,\ NodoDE)
comment29.params=pos1\ pos2
comment29.target=boolean\ compararDatos(int,\ int)
comment29.text=\r\n\ compara\ dos\ datos\ ubicados\ en\ las\ posiciones\ pos1\ y\ pos2\r\n\ @param\ enteros\ positivos\ incluidos\ el\ 0\ <\ longitud\ de\ la\ Lista\r\n\ @return\ true\ si\ los\ datos\ de\ clase\ T\ en\ las\ posiciones\ pos\ son\ iguales,\ false\ si\ no\ lo\ son\ y\ ademas\ si\ uno\ de\ las\ posiciones\ no\ existen\r\n
comment3.params=
comment3.target=boolean\ vacia()
comment3.text=\r\n\ permite\ saber\ el\ estado\ actual\ de\ la\ lista\r\n
comment30.params=dato
comment30.target=int\ contarOcurrencias(java.lang.Object)
comment30.text=\r\n\ busca\ todas\ las\ ocurrencias\ del\ dato\ en\ caso\ de\ existir\r\n\ @param\ dato\ de\ clase\ T\ a\ buscar\r\n\ @return\ la\ cant\ de\ ocurrencias\ del\ dato\ en\ caso\ de\ exitir,\ 0\ en\ caso\ de\ no\ existir\r\n
comment31.params=nodito\ dato
comment31.target=int\ contarOcurrencias(NodoDE,\ java.lang.Object)
comment32.params=otraLista
comment32.target=boolean\ equals(Lista)
comment32.text=\r\n\ compara\ la\ Lista\ original\ con\ otra\ lista\r\n\ @param\ Lista\ de\ clase\ T\r\n\ @return\ true\ si\ ambas\ listas\ son\ iguales\ en\ cada\ posicion\r\n
comment33.params=
comment33.target=ListaDE\ clonar()
comment33.text=\r\n\ te\ devuelve\ una\ Lista\ igual\ a\ la\ Lista\ original\r\n
comment34.params=
comment34.target=void\ invertir()
comment34.text=\r\n\ revierte\ la\ Lista\ \r\n
comment35.params=lista\ res
comment35.target=void\ invertir(Lista,\ Lista)
comment36.params=
comment36.target=java.lang.String\ toString()
comment36.text=\r\n\ Devuelve\ una\ representacion\ de\ String\ del\ contenido\ de\ la\ Lista\r\n
comment4.params=dato
comment4.target=void\ insertar(java.lang.Object)
comment4.text=\r\n\ insertar\ el\ dato\ al\ final\ de\ la\ lista\r\n\ @param\ dato\ a\ insertar\ de\ clase\ T\r\n\ @return\ nada\r\n
comment5.params=actual
comment5.target=NodoDE\ fin(NodoDE)
comment6.params=dato\ pos
comment6.target=void\ insertar(java.lang.Object,\ int)
comment6.text=\r\n\ inserta\ dato\ en\ la\ posicion\ pos,\ si\ ya\ hay\ un\ dato\ en\ esa\ posicion\ lo\ recorre\ una\ posicion\r\n\ @param\ dato\ de\ clase\ T\ a\ insertar\r\n\ @param\ pos\ en\ la\ que\ se\ quiere\ insertar\ pos>\=0\ entero\r\n\ @return\ nada\r\n
comment7.params=dato
comment7.target=void\ insertarIni(java.lang.Object)
comment8.params=otraLista
comment8.target=void\ insertarTodo(Lista)
comment8.text=\r\n\ inserta\ toda\ una\ Lista\ al\ final\ de\ la\ Lista\ original\r\n\ @param\ Lista\ de\ clase\ T\ a\ insertar\ en\ la\ Lista\ original\r\n\ @return\ nada\r\n
comment9.params=dato
comment9.target=java.lang.Object\ eliminar(java.lang.Object)
comment9.text=\r\n\ elimina\ el\ primer\ dato\ igual\ al\ dato\ que\ cumple\ la\ igualdad\ del\ dato\ de\ parametro,\ en\ caso\ de\ existir\ y\ ademas\ te\ devuelve\ el\ dato\ eliminado\r\n\ @param\ dato\ a\ buscar\ de\ clase\ T\ \r\n\ @return\ el\ dato\ eliminado\ si\ existiera\r\n
numComments=37
